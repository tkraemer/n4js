/**
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
grammar eu.numberfour.n4js.ts.TypeExpressions with eu.numberfour.n4js.common.unicode.Unicode hidden(WS, ML_COMMENT,
SL_COMMENT, EOL)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.numberfour.eu/ide/ts/Types"
import "http://www.numberfour.eu/ide/ts/TypeRefs"

// ****************************************************************************************************
// N4JS versions of type references and expressions, also used by Types.xtext
// ****************************************************************************************************

/*
 * cf. N4JSSec ยง4
 * Depending on where the type references is used, not all possible variants are allows.
 * This is however checked by the validator in order to
 * 1) provide better error messages
 * 2) simplify grammar
 *
 * Constraints:
 * UnionElementTypeRef: no AnyType, no Void, union itself must not be dynamic
 * FParTypeRef: no Void
 * ReturnTypeRef: everything, but no dynamic
 * // in N4JS:
 * VarTypeRef: no Void, i.e.
 * AttributeTypeRef: no Void
 */
TypeRef:
	TypeRefWithoutModifiers =>undefModifier=UndefModifierToken? | {ParameterizedTypeRef} undefModifier=UndefModifierToken;

TypeRefWithoutModifiers returns StaticBaseTypeRef:
	  ((ParameterizedTypeRef | ThisTypeRef) => dynamic?='+'?)
	| ConstructorTypeRef
	| ClassifierTypeRef
	| FunctionTypeExpression
	| UnionTypeExpression
	| IntersectionTypeExpression;

TypeRefFunctionTypeExpression returns StaticBaseTypeRef:
	  ParameterizedTypeRef
	| ConstructorTypeRef
	| ClassifierTypeRef
	| UnionTypeExpression
	| IntersectionTypeExpression
	;

TypeRefForCast returns StaticBaseTypeRef:
	  ParameterizedTypeRef
	| ThisTypeRef
	| ConstructorTypeRef
	| ClassifierTypeRef
	| FunctionTypeExpression;

TypeRefInClassifierType returns StaticBaseTypeRef:
	  ParameterizedTypeRefNominal
	| ThisTypeRefNominal;


ThisTypeRef returns ThisTypeRef:
	ThisTypeRefNominal | ThisTypeRefStructural;

ThisTypeRefNominal returns ThisTypeRefNominal:
	{ThisTypeRefNominal} 'this';

ThisTypeRefStructural returns ThisTypeRefStructural:
	definedTypingStrategy=TypingStrategyUseSiteOperator
	'this'
	('with' TStructMemberList)?;

FunctionTypeExpression returns FunctionTypeExpression:
	{FunctionTypeExpression}
	'{'
	('@' 'This' '(' declaredThisType=TypeRefFunctionTypeExpression ')')?
	'function'
	('<' ownedTypeVars+=TypeVariable (',' ownedTypeVars+=TypeVariable)* '>')?
	'(' TAnonymousFormalParameterList ')'
	(':' returnTypeRef=TypeRef)?
	'}';

fragment TAnonymousFormalParameterList*:
	(fpars+=TAnonymousFormalParameter (',' fpars+=TAnonymousFormalParameter)*)?
;

/**
 * Used in type expressions, name is optional.
 */
TAnonymousFormalParameter:
	variadic?='...'? (=> name=TIdentifier ':')? typeRef=TypeRef
;

/**
 * Used in Types language only.
 */
TFormalParameter:
	variadic?='...'? name=TIdentifier ':' typeRef=TypeRef;



UnionTypeExpression returns UnionTypeExpression:
	{UnionTypeExpression}
	'union' '{' typeRefs+=TypeRefWithoutModifiers (',' typeRefs+=TypeRefWithoutModifiers)* '}';

IntersectionTypeExpression returns IntersectionTypeExpression:
	{IntersectionTypeExpression}
	'intersection' '{' typeRefs+=TypeRefWithoutModifiers (',' typeRefs+=TypeRefWithoutModifiers)* '}';

ParameterizedTypeRef returns ParameterizedTypeRef:
	ParameterizedTypeRefNominal | ParameterizedTypeRefStructural;

ParameterizedTypeRefStructural returns ParameterizedTypeRefStructural:
	definedTypingStrategy=TypingStrategyUseSiteOperator
	declaredType=[Type|TypeReferenceName]
	(=>'<' typeArgs+=TypeArgument (',' typeArgs+=TypeArgument)* '>')?
	('with' TStructMemberList)?;

fragment TStructMemberList*:  '{' (astStructuralMembers+=TStructMember (';'|',')?)*  '}';

/**
 * All TMembers here are only used in ParameterizedTypeRefStructural references
 * Most type references are optional. However, in the types language (n4ts), these
 * references are NOT optional.
 */
TStructMember:
	  TStructGetter
	| TStructSetter
	| TStructMethod
	| TStructField;

TStructMethod:
	=>
	({TStructMethod}
		('<' typeVars+=TypeVariable (',' typeVars+=TypeVariable)* '>')?
	    name=TypesIdentifier '('
	) TAnonymousFormalParameterList ')'
	(':' returnTypeRef=TypeRef)?
;


TStructField:
	name=TypesIdentifier (':' typeRef=TypeRef)?
;

TStructGetter:
	=> ({TStructGetter}
	'get'
	name=TypesIdentifier)
	'(' ')' (':' declaredTypeRef=TypeRef)?
;

TStructSetter:
	=> ({TStructSetter}
	'set'
	name=TypesIdentifier)
	'(' fpar=TAnonymousFormalParameter ')'
;



ParameterizedTypeRefNominal returns ParameterizedTypeRef:
	declaredType=[Type|TypeReferenceName]
	(=> '<' typeArgs+=TypeArgument (',' typeArgs+=TypeArgument)* '>')?;

TypingStrategyUseSiteOperator returns TypingStrategy:
	'~' ('~' | STRUCTMODSUFFIX)?;

TypingStrategyDefSiteOperator returns TypingStrategy:
	'~';

terminal STRUCTMODSUFFIX:
	('r' | 'i' | 'w') '~'
;

ConstructorTypeRef returns ConstructorTypeRef:
	{ConstructorTypeRef} 'constructor' '{' staticTypeRef=TypeRefInClassifierType '}';

ClassifierTypeRef returns ClassifierTypeRef:
	{ClassifierTypeRef} 'type' '{' staticTypeRef=TypeRefInClassifierType '}';

TypeReferenceName:
	IDENTIFIER ('.' IDENTIFIER)*;

TypeArgument returns TypeArgument:
	Wildcard | WildcardNewNotation | TypeRef;

Wildcard returns Wildcard:
	=> ({Wildcard} '?') (('extends' declaredUpperBound=TypeRef) | ('super'
	declaredLowerBound=TypeRef))?;

WildcardNewNotation returns Wildcard:
	(usingInOutNotation?='out' declaredUpperBound=TypeRef)
|	(usingInOutNotation?='in' declaredLowerBound=TypeRef);

UndefModifierToken returns UndefModifier:
	'?';

TypeVariable:
	name=IDENTIFIER ('extends' declaredUpperBounds+=ParameterizedTypeRef ('&'
	declaredUpperBounds+=ParameterizedTypeRef)*)?;

TypesIdentifier:
	IDENTIFIER
	// no ECMAScript keywords, only in certain contexts
	| 'get'
	| 'set'
	// Types keywords
	| 'abstract'
//	| 'any'
	| 'project'
	| 'union'
	| 'intersection'
	// no ECMAScript keywords, used in certain [ECM13] and N4JS contexts (import x as y from)
	| 'as'
	| 'from'
	| 'type'
	| 'void'
	| 'null'
	| 'enum'; // GH-203

TIdentifier:
	TypesIdentifier
	// 7.6.1.2: future reserved words, may not be used only in strict mode:
	| 'implements'
	| 'interface'
//	| 'let'
//	| 'package'
	| 'private'
	| 'protected'
	| 'public'
	| 'static'
//	| 'yield'
	// Types keywords which are no valid TypesIdentifier
//	| 'undefined'
;

terminal IDENTIFIER:
	IDENTIFIER_START IDENTIFIER_PART*;

terminal INT returns ecore::EBigDecimal:
	DECIMAL_INTEGER_LITERAL_FRAGMENT;

terminal ML_COMMENT:
	ML_COMMENT_FRAGMENT;

terminal SL_COMMENT:
	'//' (!LINE_TERMINATOR_FRAGMENT)*;

terminal EOL:
	LINE_TERMINATOR_SEQUENCE_FRAGMENT;

terminal WS:
	WHITESPACE_FRAGMENT+;

terminal fragment UNICODE_ESCAPE_FRAGMENT:
	'\\' ('u' (
		HEX_DIGIT (HEX_DIGIT (HEX_DIGIT HEX_DIGIT?)?)?
	  | '{' HEX_DIGIT* '}'?
	)?)?;

terminal fragment IDENTIFIER_START:
	  UNICODE_LETTER_FRAGMENT
	| '$'
	| '_'
	| UNICODE_ESCAPE_FRAGMENT;

terminal fragment IDENTIFIER_PART:
	  UNICODE_LETTER_FRAGMENT
	| UNICODE_ESCAPE_FRAGMENT
	| '$'
	| UNICODE_COMBINING_MARK_FRAGMENT
	| UNICODE_DIGIT_FRAGMENT
	| UNICODE_CONNECTOR_PUNCTUATION_FRAGMENT
	| ZWNJ
	| ZWJ;

// Intentionally unused to get rid of bogus lexer errors when
// the input contains an incomplete variadic?='...' keyword, e.g. ..)
terminal DOT_DOT:
	'..'
;
