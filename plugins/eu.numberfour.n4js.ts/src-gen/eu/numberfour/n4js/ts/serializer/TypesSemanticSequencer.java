/*
 * generated by Xtext
 */
package eu.numberfour.n4js.ts.serializer;

import com.google.inject.Inject;
import eu.numberfour.n4js.ts.services.TypesGrammarAccess;
import eu.numberfour.n4js.ts.typeRefs.ClassifierTypeRef;
import eu.numberfour.n4js.ts.typeRefs.ConstructorTypeRef;
import eu.numberfour.n4js.ts.typeRefs.FunctionTypeExpression;
import eu.numberfour.n4js.ts.typeRefs.IntersectionTypeExpression;
import eu.numberfour.n4js.ts.typeRefs.ParameterizedTypeRef;
import eu.numberfour.n4js.ts.typeRefs.ParameterizedTypeRefStructural;
import eu.numberfour.n4js.ts.typeRefs.ThisTypeRefNominal;
import eu.numberfour.n4js.ts.typeRefs.ThisTypeRefStructural;
import eu.numberfour.n4js.ts.typeRefs.TypeRefsPackage;
import eu.numberfour.n4js.ts.typeRefs.UnionTypeExpression;
import eu.numberfour.n4js.ts.typeRefs.Wildcard;
import eu.numberfour.n4js.ts.types.AnyType;
import eu.numberfour.n4js.ts.types.NullType;
import eu.numberfour.n4js.ts.types.PrimitiveType;
import eu.numberfour.n4js.ts.types.TAnnotation;
import eu.numberfour.n4js.ts.types.TAnnotationStringArgument;
import eu.numberfour.n4js.ts.types.TAnnotationTypeRefArgument;
import eu.numberfour.n4js.ts.types.TAnonymousFormalParameter;
import eu.numberfour.n4js.ts.types.TClass;
import eu.numberfour.n4js.ts.types.TEnum;
import eu.numberfour.n4js.ts.types.TEnumLiteral;
import eu.numberfour.n4js.ts.types.TField;
import eu.numberfour.n4js.ts.types.TFormalParameter;
import eu.numberfour.n4js.ts.types.TFunction;
import eu.numberfour.n4js.ts.types.TGetter;
import eu.numberfour.n4js.ts.types.TInterface;
import eu.numberfour.n4js.ts.types.TMethod;
import eu.numberfour.n4js.ts.types.TObjectPrototype;
import eu.numberfour.n4js.ts.types.TSetter;
import eu.numberfour.n4js.ts.types.TStructField;
import eu.numberfour.n4js.ts.types.TStructGetter;
import eu.numberfour.n4js.ts.types.TStructMethod;
import eu.numberfour.n4js.ts.types.TStructSetter;
import eu.numberfour.n4js.ts.types.TypeDefs;
import eu.numberfour.n4js.ts.types.TypeVariable;
import eu.numberfour.n4js.ts.types.TypesPackage;
import eu.numberfour.n4js.ts.types.UndefinedType;
import eu.numberfour.n4js.ts.types.VirtualBaseType;
import eu.numberfour.n4js.ts.types.VoidType;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class TypesSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private TypesGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == TypeRefsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TypeRefsPackage.CLASSIFIER_TYPE_REF:
				if (rule == grammarAccess.getTypeRefWithoutModifiersRule()
						|| rule == grammarAccess.getTypeRefFunctionTypeExpressionRule()
						|| rule == grammarAccess.getTypeRefForCastRule()
						|| rule == grammarAccess.getClassifierTypeRefRule()) {
					sequence_ClassifierTypeRef(context, (ClassifierTypeRef) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTypeRefRule()
						|| rule == grammarAccess.getTypeArgumentRule()) {
					sequence_ClassifierTypeRef_TypeRef(context, (ClassifierTypeRef) semanticObject); 
					return; 
				}
				else break;
			case TypeRefsPackage.CONSTRUCTOR_TYPE_REF:
				if (rule == grammarAccess.getTypeRefWithoutModifiersRule()
						|| rule == grammarAccess.getTypeRefFunctionTypeExpressionRule()
						|| rule == grammarAccess.getTypeRefForCastRule()
						|| rule == grammarAccess.getConstructorTypeRefRule()) {
					sequence_ConstructorTypeRef(context, (ConstructorTypeRef) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTypeRefRule()
						|| rule == grammarAccess.getTypeArgumentRule()) {
					sequence_ConstructorTypeRef_TypeRef(context, (ConstructorTypeRef) semanticObject); 
					return; 
				}
				else break;
			case TypeRefsPackage.FUNCTION_TYPE_EXPRESSION:
				if (rule == grammarAccess.getTypeRefWithoutModifiersRule()
						|| rule == grammarAccess.getTypeRefForCastRule()
						|| rule == grammarAccess.getFunctionTypeExpressionRule()) {
					sequence_FunctionTypeExpression_TAnonymousFormalParameterList(context, (FunctionTypeExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTypeRefRule()
						|| rule == grammarAccess.getTypeArgumentRule()) {
					sequence_FunctionTypeExpression_TAnonymousFormalParameterList_TypeRef(context, (FunctionTypeExpression) semanticObject); 
					return; 
				}
				else break;
			case TypeRefsPackage.INTERSECTION_TYPE_EXPRESSION:
				if (rule == grammarAccess.getTypeRefWithoutModifiersRule()
						|| rule == grammarAccess.getTypeRefFunctionTypeExpressionRule()
						|| rule == grammarAccess.getIntersectionTypeExpressionRule()) {
					sequence_IntersectionTypeExpression(context, (IntersectionTypeExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTypeRefRule()
						|| rule == grammarAccess.getTypeArgumentRule()) {
					sequence_IntersectionTypeExpression_TypeRef(context, (IntersectionTypeExpression) semanticObject); 
					return; 
				}
				else break;
			case TypeRefsPackage.PARAMETERIZED_TYPE_REF:
				if (rule == grammarAccess.getTypeRefFunctionTypeExpressionRule()
						|| rule == grammarAccess.getTypeRefForCastRule()
						|| rule == grammarAccess.getTypeRefInClassifierTypeRule()
						|| rule == grammarAccess.getParameterizedTypeRefRule()
						|| rule == grammarAccess.getParameterizedTypeRefNominalRule()) {
					sequence_ParameterizedTypeRefNominal(context, (ParameterizedTypeRef) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTypeRefWithoutModifiersRule()) {
					sequence_ParameterizedTypeRefNominal_TypeRefWithoutModifiers(context, (ParameterizedTypeRef) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTypeRefRule()
						|| rule == grammarAccess.getTypeArgumentRule()) {
					sequence_ParameterizedTypeRefNominal_TypeRef_TypeRefWithoutModifiers(context, (ParameterizedTypeRef) semanticObject); 
					return; 
				}
				else break;
			case TypeRefsPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL:
				if (rule == grammarAccess.getTypeRefFunctionTypeExpressionRule()
						|| rule == grammarAccess.getTypeRefForCastRule()
						|| rule == grammarAccess.getParameterizedTypeRefRule()
						|| rule == grammarAccess.getParameterizedTypeRefStructuralRule()) {
					sequence_ParameterizedTypeRefStructural_TStructMemberList(context, (ParameterizedTypeRefStructural) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTypeRefWithoutModifiersRule()) {
					sequence_ParameterizedTypeRefStructural_TStructMemberList_TypeRefWithoutModifiers(context, (ParameterizedTypeRefStructural) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTypeRefRule()
						|| rule == grammarAccess.getTypeArgumentRule()) {
					sequence_ParameterizedTypeRefStructural_TStructMemberList_TypeRef_TypeRefWithoutModifiers(context, (ParameterizedTypeRefStructural) semanticObject); 
					return; 
				}
				else break;
			case TypeRefsPackage.THIS_TYPE_REF_NOMINAL:
				if (rule == grammarAccess.getTypeRefForCastRule()
						|| rule == grammarAccess.getTypeRefInClassifierTypeRule()
						|| rule == grammarAccess.getThisTypeRefRule()
						|| rule == grammarAccess.getThisTypeRefNominalRule()) {
					sequence_ThisTypeRefNominal(context, (ThisTypeRefNominal) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTypeRefWithoutModifiersRule()) {
					sequence_ThisTypeRefNominal_TypeRefWithoutModifiers(context, (ThisTypeRefNominal) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTypeRefRule()
						|| rule == grammarAccess.getTypeArgumentRule()) {
					sequence_ThisTypeRefNominal_TypeRef_TypeRefWithoutModifiers(context, (ThisTypeRefNominal) semanticObject); 
					return; 
				}
				else break;
			case TypeRefsPackage.THIS_TYPE_REF_STRUCTURAL:
				if (rule == grammarAccess.getTypeRefForCastRule()
						|| rule == grammarAccess.getThisTypeRefRule()
						|| rule == grammarAccess.getThisTypeRefStructuralRule()) {
					sequence_TStructMemberList_ThisTypeRefStructural(context, (ThisTypeRefStructural) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTypeRefWithoutModifiersRule()) {
					sequence_TStructMemberList_ThisTypeRefStructural_TypeRefWithoutModifiers(context, (ThisTypeRefStructural) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTypeRefRule()
						|| rule == grammarAccess.getTypeArgumentRule()) {
					sequence_TStructMemberList_ThisTypeRefStructural_TypeRef_TypeRefWithoutModifiers(context, (ThisTypeRefStructural) semanticObject); 
					return; 
				}
				else break;
			case TypeRefsPackage.UNION_TYPE_EXPRESSION:
				if (rule == grammarAccess.getTypeRefRule()
						|| rule == grammarAccess.getTypeArgumentRule()) {
					sequence_TypeRef_UnionTypeExpression(context, (UnionTypeExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTypeRefWithoutModifiersRule()
						|| rule == grammarAccess.getTypeRefFunctionTypeExpressionRule()
						|| rule == grammarAccess.getUnionTypeExpressionRule()) {
					sequence_UnionTypeExpression(context, (UnionTypeExpression) semanticObject); 
					return; 
				}
				else break;
			case TypeRefsPackage.WILDCARD:
				if (rule == grammarAccess.getWildcardNewNotationRule()) {
					sequence_WildcardNewNotation(context, (Wildcard) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getWildcardRule()) {
					sequence_Wildcard(context, (Wildcard) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTypeArgumentRule()) {
					sequence_Wildcard_WildcardNewNotation(context, (Wildcard) semanticObject); 
					return; 
				}
				else break;
			}
		else if (epackage == TypesPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TypesPackage.ANY_TYPE:
				sequence_AnyType(context, (AnyType) semanticObject); 
				return; 
			case TypesPackage.NULL_TYPE:
				sequence_NullType(context, (NullType) semanticObject); 
				return; 
			case TypesPackage.PRIMITIVE_TYPE:
				sequence_PrimitiveType(context, (PrimitiveType) semanticObject); 
				return; 
			case TypesPackage.TANNOTATION:
				sequence_TAnnotation(context, (TAnnotation) semanticObject); 
				return; 
			case TypesPackage.TANNOTATION_STRING_ARGUMENT:
				sequence_TAnnotationStringArgument(context, (TAnnotationStringArgument) semanticObject); 
				return; 
			case TypesPackage.TANNOTATION_TYPE_REF_ARGUMENT:
				sequence_TAnnotationTypeRefArgument(context, (TAnnotationTypeRefArgument) semanticObject); 
				return; 
			case TypesPackage.TANONYMOUS_FORMAL_PARAMETER:
				sequence_TAnonymousFormalParameter(context, (TAnonymousFormalParameter) semanticObject); 
				return; 
			case TypesPackage.TCLASS:
				sequence_TClass(context, (TClass) semanticObject); 
				return; 
			case TypesPackage.TENUM:
				sequence_TEnum(context, (TEnum) semanticObject); 
				return; 
			case TypesPackage.TENUM_LITERAL:
				sequence_TEnumLiteral(context, (TEnumLiteral) semanticObject); 
				return; 
			case TypesPackage.TFIELD:
				sequence_TField(context, (TField) semanticObject); 
				return; 
			case TypesPackage.TFORMAL_PARAMETER:
				sequence_TFormalParameter(context, (TFormalParameter) semanticObject); 
				return; 
			case TypesPackage.TFUNCTION:
				sequence_TFunction(context, (TFunction) semanticObject); 
				return; 
			case TypesPackage.TGETTER:
				sequence_TGetter(context, (TGetter) semanticObject); 
				return; 
			case TypesPackage.TINTERFACE:
				sequence_TInterface(context, (TInterface) semanticObject); 
				return; 
			case TypesPackage.TMETHOD:
				if (rule == grammarAccess.getCallableCtorRule()) {
					sequence_CallableCtor(context, (TMethod) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTMemberRule()
						|| rule == grammarAccess.getTMethodRule()) {
					sequence_TMethod(context, (TMethod) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.TOBJECT_PROTOTYPE:
				sequence_TObjectPrototype(context, (TObjectPrototype) semanticObject); 
				return; 
			case TypesPackage.TSETTER:
				sequence_TSetter(context, (TSetter) semanticObject); 
				return; 
			case TypesPackage.TSTRUCT_FIELD:
				sequence_TStructField(context, (TStructField) semanticObject); 
				return; 
			case TypesPackage.TSTRUCT_GETTER:
				sequence_TStructGetter(context, (TStructGetter) semanticObject); 
				return; 
			case TypesPackage.TSTRUCT_METHOD:
				sequence_TAnonymousFormalParameterList_TStructMethod(context, (TStructMethod) semanticObject); 
				return; 
			case TypesPackage.TSTRUCT_SETTER:
				sequence_TStructSetter(context, (TStructSetter) semanticObject); 
				return; 
			case TypesPackage.TYPE_DEFS:
				sequence_TypeDefs(context, (TypeDefs) semanticObject); 
				return; 
			case TypesPackage.TYPE_VARIABLE:
				sequence_TypeVariable(context, (TypeVariable) semanticObject); 
				return; 
			case TypesPackage.UNDEFINED_TYPE:
				sequence_UndefinedType(context, (UndefinedType) semanticObject); 
				return; 
			case TypesPackage.VIRTUAL_BASE_TYPE:
				sequence_VirtualBaseType(context, (VirtualBaseType) semanticObject); 
				return; 
			case TypesPackage.VOID_TYPE:
				sequence_VoidType(context, (VoidType) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Type returns AnyType
	 *     AnyType returns AnyType
	 *
	 * Constraint:
	 *     name='any'
	 */
	protected void sequence_AnyType(ISerializationContext context, AnyType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TypesPackage.Literals.IDENTIFIABLE_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TypesPackage.Literals.IDENTIFIABLE_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAnyTypeAccess().getNameAnyKeyword_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CallableCtor returns TMethod
	 *
	 * Constraint:
	 *     ((fpars+=TFormalParameter fpars+=TFormalParameter*)? returnTypeRef=TypeRef?)
	 */
	protected void sequence_CallableCtor(ISerializationContext context, TMethod semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypeRefWithoutModifiers returns ClassifierTypeRef
	 *     TypeRefFunctionTypeExpression returns ClassifierTypeRef
	 *     TypeRefForCast returns ClassifierTypeRef
	 *     ClassifierTypeRef returns ClassifierTypeRef
	 *
	 * Constraint:
	 *     staticTypeRef=TypeRefInClassifierType
	 */
	protected void sequence_ClassifierTypeRef(ISerializationContext context, ClassifierTypeRef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TypeRefsPackage.Literals.CLASSIFIER_TYPE_REF__STATIC_TYPE_REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TypeRefsPackage.Literals.CLASSIFIER_TYPE_REF__STATIC_TYPE_REF));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getClassifierTypeRefAccess().getStaticTypeRefTypeRefInClassifierTypeParserRuleCall_3_0(), semanticObject.getStaticTypeRef());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TypeRef returns ClassifierTypeRef
	 *     TypeArgument returns ClassifierTypeRef
	 *
	 * Constraint:
	 *     (staticTypeRef=TypeRefInClassifierType undefModifier=UndefModifierToken? nullModifier=NullModifierToken?)
	 */
	protected void sequence_ClassifierTypeRef_TypeRef(ISerializationContext context, ClassifierTypeRef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypeRefWithoutModifiers returns ConstructorTypeRef
	 *     TypeRefFunctionTypeExpression returns ConstructorTypeRef
	 *     TypeRefForCast returns ConstructorTypeRef
	 *     ConstructorTypeRef returns ConstructorTypeRef
	 *
	 * Constraint:
	 *     staticTypeRef=TypeRefInClassifierType
	 */
	protected void sequence_ConstructorTypeRef(ISerializationContext context, ConstructorTypeRef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TypeRefsPackage.Literals.CLASSIFIER_TYPE_REF__STATIC_TYPE_REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TypeRefsPackage.Literals.CLASSIFIER_TYPE_REF__STATIC_TYPE_REF));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConstructorTypeRefAccess().getStaticTypeRefTypeRefInClassifierTypeParserRuleCall_3_0(), semanticObject.getStaticTypeRef());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TypeRef returns ConstructorTypeRef
	 *     TypeArgument returns ConstructorTypeRef
	 *
	 * Constraint:
	 *     (staticTypeRef=TypeRefInClassifierType undefModifier=UndefModifierToken? nullModifier=NullModifierToken?)
	 */
	protected void sequence_ConstructorTypeRef_TypeRef(ISerializationContext context, ConstructorTypeRef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypeRefWithoutModifiers returns FunctionTypeExpression
	 *     TypeRefForCast returns FunctionTypeExpression
	 *     FunctionTypeExpression returns FunctionTypeExpression
	 *
	 * Constraint:
	 *     (
	 *         declaredThisType=TypeRefFunctionTypeExpression? 
	 *         (ownedTypeVars+=TypeVariable ownedTypeVars+=TypeVariable*)? 
	 *         (fpars+=TAnonymousFormalParameter fpars+=TAnonymousFormalParameter*)? 
	 *         returnTypeRef=TypeRef?
	 *     )
	 */
	protected void sequence_FunctionTypeExpression_TAnonymousFormalParameterList(ISerializationContext context, FunctionTypeExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypeRef returns FunctionTypeExpression
	 *     TypeArgument returns FunctionTypeExpression
	 *
	 * Constraint:
	 *     (
	 *         declaredThisType=TypeRefFunctionTypeExpression? 
	 *         (ownedTypeVars+=TypeVariable ownedTypeVars+=TypeVariable*)? 
	 *         (fpars+=TAnonymousFormalParameter fpars+=TAnonymousFormalParameter*)? 
	 *         returnTypeRef=TypeRef? 
	 *         undefModifier=UndefModifierToken? 
	 *         nullModifier=NullModifierToken?
	 *     )
	 */
	protected void sequence_FunctionTypeExpression_TAnonymousFormalParameterList_TypeRef(ISerializationContext context, FunctionTypeExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypeRefWithoutModifiers returns IntersectionTypeExpression
	 *     TypeRefFunctionTypeExpression returns IntersectionTypeExpression
	 *     IntersectionTypeExpression returns IntersectionTypeExpression
	 *
	 * Constraint:
	 *     (typeRefs+=TypeRefWithoutModifiers typeRefs+=TypeRefWithoutModifiers*)
	 */
	protected void sequence_IntersectionTypeExpression(ISerializationContext context, IntersectionTypeExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypeRef returns IntersectionTypeExpression
	 *     TypeArgument returns IntersectionTypeExpression
	 *
	 * Constraint:
	 *     (typeRefs+=TypeRefWithoutModifiers typeRefs+=TypeRefWithoutModifiers* undefModifier=UndefModifierToken? nullModifier=NullModifierToken?)
	 */
	protected void sequence_IntersectionTypeExpression_TypeRef(ISerializationContext context, IntersectionTypeExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns NullType
	 *     NullType returns NullType
	 *
	 * Constraint:
	 *     name='null'
	 */
	protected void sequence_NullType(ISerializationContext context, NullType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TypesPackage.Literals.IDENTIFIABLE_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TypesPackage.Literals.IDENTIFIABLE_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNullTypeAccess().getNameNullKeyword_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TypeRefFunctionTypeExpression returns ParameterizedTypeRef
	 *     TypeRefForCast returns ParameterizedTypeRef
	 *     TypeRefInClassifierType returns ParameterizedTypeRef
	 *     ParameterizedTypeRef returns ParameterizedTypeRef
	 *     ParameterizedTypeRefNominal returns ParameterizedTypeRef
	 *
	 * Constraint:
	 *     (declaredType=[Type|TypeReferenceName] (typeArgs+=TypeArgument typeArgs+=TypeArgument*)?)
	 */
	protected void sequence_ParameterizedTypeRefNominal(ISerializationContext context, ParameterizedTypeRef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypeRefWithoutModifiers returns ParameterizedTypeRef
	 *
	 * Constraint:
	 *     (declaredType=[Type|TypeReferenceName] (typeArgs+=TypeArgument typeArgs+=TypeArgument*)? dynamic?='+'?)
	 */
	protected void sequence_ParameterizedTypeRefNominal_TypeRefWithoutModifiers(ISerializationContext context, ParameterizedTypeRef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypeRef returns ParameterizedTypeRef
	 *     TypeArgument returns ParameterizedTypeRef
	 *
	 * Constraint:
	 *     (
	 *         declaredType=[Type|TypeReferenceName] 
	 *         (typeArgs+=TypeArgument typeArgs+=TypeArgument*)? 
	 *         dynamic?='+'? 
	 *         undefModifier=UndefModifierToken? 
	 *         nullModifier=NullModifierToken?
	 *     )
	 */
	protected void sequence_ParameterizedTypeRefNominal_TypeRef_TypeRefWithoutModifiers(ISerializationContext context, ParameterizedTypeRef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypeRefFunctionTypeExpression returns ParameterizedTypeRefStructural
	 *     TypeRefForCast returns ParameterizedTypeRefStructural
	 *     ParameterizedTypeRef returns ParameterizedTypeRefStructural
	 *     ParameterizedTypeRefStructural returns ParameterizedTypeRefStructural
	 *
	 * Constraint:
	 *     (
	 *         definedTypingStrategy=TypingStrategyUseSiteOperator 
	 *         declaredType=[Type|TypeReferenceName] 
	 *         (typeArgs+=TypeArgument typeArgs+=TypeArgument*)? 
	 *         astStructuralMembers+=TStructMember*
	 *     )
	 */
	protected void sequence_ParameterizedTypeRefStructural_TStructMemberList(ISerializationContext context, ParameterizedTypeRefStructural semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypeRefWithoutModifiers returns ParameterizedTypeRefStructural
	 *
	 * Constraint:
	 *     (
	 *         definedTypingStrategy=TypingStrategyUseSiteOperator 
	 *         declaredType=[Type|TypeReferenceName] 
	 *         (typeArgs+=TypeArgument typeArgs+=TypeArgument*)? 
	 *         astStructuralMembers+=TStructMember* 
	 *         dynamic?='+'?
	 *     )
	 */
	protected void sequence_ParameterizedTypeRefStructural_TStructMemberList_TypeRefWithoutModifiers(ISerializationContext context, ParameterizedTypeRefStructural semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypeRef returns ParameterizedTypeRefStructural
	 *     TypeArgument returns ParameterizedTypeRefStructural
	 *
	 * Constraint:
	 *     (
	 *         definedTypingStrategy=TypingStrategyUseSiteOperator 
	 *         declaredType=[Type|TypeReferenceName] 
	 *         (typeArgs+=TypeArgument typeArgs+=TypeArgument*)? 
	 *         astStructuralMembers+=TStructMember* 
	 *         dynamic?='+'? 
	 *         undefModifier=UndefModifierToken? 
	 *         nullModifier=NullModifierToken?
	 *     )
	 */
	protected void sequence_ParameterizedTypeRefStructural_TStructMemberList_TypeRef_TypeRefWithoutModifiers(ISerializationContext context, ParameterizedTypeRefStructural semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns PrimitiveType
	 *     PrimitiveType returns PrimitiveType
	 *
	 * Constraint:
	 *     (
	 *         name=TypesIdentifier 
	 *         typeVars+=TypeVariable? 
	 *         declaredElementType=ParameterizedTypeRefNominal? 
	 *         autoboxedType=[TClassifier|TypeReferenceName]? 
	 *         assignmentCompatible=[PrimitiveType|TypeReferenceName]?
	 *     )
	 */
	protected void sequence_PrimitiveType(ISerializationContext context, PrimitiveType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TAnnotationArgument returns TAnnotationStringArgument
	 *     TAnnotationStringArgument returns TAnnotationStringArgument
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_TAnnotationStringArgument(ISerializationContext context, TAnnotationStringArgument semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TypesPackage.Literals.TANNOTATION_STRING_ARGUMENT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TypesPackage.Literals.TANNOTATION_STRING_ARGUMENT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTAnnotationStringArgumentAccess().getValueSTRINGTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TAnnotationArgument returns TAnnotationTypeRefArgument
	 *     TAnnotationTypeRefArgument returns TAnnotationTypeRefArgument
	 *
	 * Constraint:
	 *     typeRef=TypeRef
	 */
	protected void sequence_TAnnotationTypeRefArgument(ISerializationContext context, TAnnotationTypeRefArgument semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TypesPackage.Literals.TANNOTATION_TYPE_REF_ARGUMENT__TYPE_REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TypesPackage.Literals.TANNOTATION_TYPE_REF_ARGUMENT__TYPE_REF));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTAnnotationTypeRefArgumentAccess().getTypeRefTypeRefParserRuleCall_0(), semanticObject.getTypeRef());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TAnnotation returns TAnnotation
	 *
	 * Constraint:
	 *     (name=IDENTIFIER (args+=TAnnotationArgument args+=TAnnotationArgument*)?)
	 */
	protected void sequence_TAnnotation(ISerializationContext context, TAnnotation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TStructMember returns TStructMethod
	 *     TStructMethod returns TStructMethod
	 *
	 * Constraint:
	 *     (
	 *         (typeVars+=TypeVariable typeVars+=TypeVariable*)? 
	 *         name=TypesIdentifier 
	 *         (fpars+=TAnonymousFormalParameter fpars+=TAnonymousFormalParameter*)? 
	 *         returnTypeRef=TypeRef?
	 *     )
	 */
	protected void sequence_TAnonymousFormalParameterList_TStructMethod(ISerializationContext context, TStructMethod semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TAnonymousFormalParameter returns TAnonymousFormalParameter
	 *
	 * Constraint:
	 *     (variadic?='...'? name=TIdentifier? typeRef=TypeRef)
	 */
	protected void sequence_TAnonymousFormalParameter(ISerializationContext context, TAnonymousFormalParameter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns TClass
	 *     TClass returns TClass
	 *
	 * Constraint:
	 *     (
	 *         declaredTypeAccessModifier=TypeAccessModifier 
	 *         declaredProvidedByRuntime?='providedByRuntime'? 
	 *         declaredAbstract?='abstract'? 
	 *         declaredFinal?='final'? 
	 *         typingStrategy=TypingStrategyDefSiteOperator? 
	 *         name=TypesIdentifier 
	 *         (typeVars+=TypeVariable typeVars+=TypeVariable*)? 
	 *         superClassRef=ParameterizedTypeRefNominal? 
	 *         (implementedInterfaceRefs+=ParameterizedTypeRefNominal implementedInterfaceRefs+=ParameterizedTypeRefNominal*)? 
	 *         annotations+=TAnnotation* 
	 *         ownedMembers+=TMember* 
	 *         (callableCtor=CallableCtor ownedMembers+=TMember*)?
	 *     )
	 */
	protected void sequence_TClass(ISerializationContext context, TClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TEnumLiteral returns TEnumLiteral
	 *
	 * Constraint:
	 *     name=IDENTIFIER
	 */
	protected void sequence_TEnumLiteral(ISerializationContext context, TEnumLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TypesPackage.Literals.IDENTIFIABLE_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TypesPackage.Literals.IDENTIFIABLE_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTEnumLiteralAccess().getNameIDENTIFIERTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Type returns TEnum
	 *     TEnum returns TEnum
	 *
	 * Constraint:
	 *     (
	 *         declaredTypeAccessModifier=TypeAccessModifier 
	 *         declaredProvidedByRuntime?='providedByRuntime'? 
	 *         name=TypesIdentifier 
	 *         literals+=TEnumLiteral 
	 *         literals+=TEnumLiteral*
	 *     )
	 */
	protected void sequence_TEnum(ISerializationContext context, TEnum semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TMember returns TField
	 *     TField returns TField
	 *
	 * Constraint:
	 *     (
	 *         declaredMemberAccessModifier=MemberAccessModifier 
	 *         (declaredStatic?='static' | const?='const' | declaredFinal?='final')? 
	 *         (name=TypesIdentifier | name=TypesComputedPropertyName) 
	 *         typeRef=TypeRef
	 *     )
	 */
	protected void sequence_TField(ISerializationContext context, TField semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TFormalParameter returns TFormalParameter
	 *
	 * Constraint:
	 *     (variadic?='...'? name=TIdentifier typeRef=TypeRef)
	 */
	protected void sequence_TFormalParameter(ISerializationContext context, TFormalParameter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns TFunction
	 *     TFunction returns TFunction
	 *
	 * Constraint:
	 *     (
	 *         declaredTypeAccessModifier=TypeAccessModifier 
	 *         declaredProvidedByRuntime?='providedByRuntime'? 
	 *         (typeVars+=TypeVariable typeVars+=TypeVariable*)? 
	 *         name=TIdentifier 
	 *         (fpars+=TFormalParameter fpars+=TFormalParameter*)? 
	 *         returnTypeRef=TypeRef
	 *     )
	 */
	protected void sequence_TFunction(ISerializationContext context, TFunction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TMember returns TGetter
	 *     TGetter returns TGetter
	 *
	 * Constraint:
	 *     (
	 *         declaredMemberAccessModifier=MemberAccessModifier 
	 *         (declaredAbstract?='abstract' | declaredStatic?='static')? 
	 *         (name=TypesIdentifier | name=TypesComputedPropertyName) 
	 *         declaredTypeRef=TypeRef
	 *     )
	 */
	protected void sequence_TGetter(ISerializationContext context, TGetter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns TInterface
	 *     TInterface returns TInterface
	 *
	 * Constraint:
	 *     (
	 *         declaredTypeAccessModifier=TypeAccessModifier 
	 *         declaredProvidedByRuntime?='providedByRuntime'? 
	 *         typingStrategy=TypingStrategyDefSiteOperator? 
	 *         name=TypesIdentifier 
	 *         (typeVars+=TypeVariable typeVars+=TypeVariable*)? 
	 *         (superInterfaceRefs+=ParameterizedTypeRefNominal superInterfaceRefs+=ParameterizedTypeRefNominal*)? 
	 *         annotations+=TAnnotation* 
	 *         ownedMembers+=TMember*
	 *     )
	 */
	protected void sequence_TInterface(ISerializationContext context, TInterface semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TMember returns TMethod
	 *     TMethod returns TMethod
	 *
	 * Constraint:
	 *     (
	 *         declaredMemberAccessModifier=MemberAccessModifier 
	 *         (declaredStatic?='static' | declaredAbstract?='abstract')? 
	 *         (typeVars+=TypeVariable typeVars+=TypeVariable*)? 
	 *         (name=TypesIdentifier | name=TypesComputedPropertyName) 
	 *         (fpars+=TFormalParameter fpars+=TFormalParameter*)? 
	 *         returnTypeRef=TypeRef
	 *     )
	 */
	protected void sequence_TMethod(ISerializationContext context, TMethod semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns TObjectPrototype
	 *     TObjectPrototype returns TObjectPrototype
	 *
	 * Constraint:
	 *     (
	 *         declaredTypeAccessModifier=TypeAccessModifier 
	 *         declaredProvidedByRuntime?='providedByRuntime'? 
	 *         declaredFinal?='final'? 
	 *         name=TypesIdentifier 
	 *         (typeVars+=TypeVariable typeVars+=TypeVariable*)? 
	 *         superType=ParameterizedTypeRefNominal? 
	 *         declaredElementType=ParameterizedTypeRefNominal? 
	 *         annotations+=TAnnotation* 
	 *         ownedMembers+=TMember* 
	 *         (callableCtor=CallableCtor ownedMembers+=TMember*)?
	 *     )
	 */
	protected void sequence_TObjectPrototype(ISerializationContext context, TObjectPrototype semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TMember returns TSetter
	 *     TSetter returns TSetter
	 *
	 * Constraint:
	 *     (
	 *         declaredMemberAccessModifier=MemberAccessModifier 
	 *         (declaredAbstract?='abstract' | declaredStatic?='static')? 
	 *         (name=TypesIdentifier | name=TypesComputedPropertyName) 
	 *         fpar=TFormalParameter
	 *     )
	 */
	protected void sequence_TSetter(ISerializationContext context, TSetter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TStructMember returns TStructField
	 *     TStructField returns TStructField
	 *
	 * Constraint:
	 *     (name=TypesIdentifier typeRef=TypeRef?)
	 */
	protected void sequence_TStructField(ISerializationContext context, TStructField semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TStructMember returns TStructGetter
	 *     TStructGetter returns TStructGetter
	 *
	 * Constraint:
	 *     (name=TypesIdentifier declaredTypeRef=TypeRef?)
	 */
	protected void sequence_TStructGetter(ISerializationContext context, TStructGetter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypeRefForCast returns ThisTypeRefStructural
	 *     ThisTypeRef returns ThisTypeRefStructural
	 *     ThisTypeRefStructural returns ThisTypeRefStructural
	 *
	 * Constraint:
	 *     (definedTypingStrategy=TypingStrategyUseSiteOperator astStructuralMembers+=TStructMember*)
	 */
	protected void sequence_TStructMemberList_ThisTypeRefStructural(ISerializationContext context, ThisTypeRefStructural semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypeRefWithoutModifiers returns ThisTypeRefStructural
	 *
	 * Constraint:
	 *     (definedTypingStrategy=TypingStrategyUseSiteOperator astStructuralMembers+=TStructMember* dynamic?='+'?)
	 */
	protected void sequence_TStructMemberList_ThisTypeRefStructural_TypeRefWithoutModifiers(ISerializationContext context, ThisTypeRefStructural semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypeRef returns ThisTypeRefStructural
	 *     TypeArgument returns ThisTypeRefStructural
	 *
	 * Constraint:
	 *     (
	 *         definedTypingStrategy=TypingStrategyUseSiteOperator 
	 *         astStructuralMembers+=TStructMember* 
	 *         dynamic?='+'? 
	 *         undefModifier=UndefModifierToken? 
	 *         nullModifier=NullModifierToken?
	 *     )
	 */
	protected void sequence_TStructMemberList_ThisTypeRefStructural_TypeRef_TypeRefWithoutModifiers(ISerializationContext context, ThisTypeRefStructural semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TStructMember returns TStructSetter
	 *     TStructSetter returns TStructSetter
	 *
	 * Constraint:
	 *     (name=TypesIdentifier fpar=TAnonymousFormalParameter)
	 */
	protected void sequence_TStructSetter(ISerializationContext context, TStructSetter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TypesPackage.Literals.IDENTIFIABLE_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TypesPackage.Literals.IDENTIFIABLE_ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, TypesPackage.Literals.TSETTER__FPAR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TypesPackage.Literals.TSETTER__FPAR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTStructSetterAccess().getNameTypesIdentifierParserRuleCall_0_0_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getTStructSetterAccess().getFparTAnonymousFormalParameterParserRuleCall_2_0(), semanticObject.getFpar());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TypeRefForCast returns ThisTypeRefNominal
	 *     TypeRefInClassifierType returns ThisTypeRefNominal
	 *     ThisTypeRef returns ThisTypeRefNominal
	 *     ThisTypeRefNominal returns ThisTypeRefNominal
	 *
	 * Constraint:
	 *     {ThisTypeRefNominal}
	 */
	protected void sequence_ThisTypeRefNominal(ISerializationContext context, ThisTypeRefNominal semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypeRefWithoutModifiers returns ThisTypeRefNominal
	 *
	 * Constraint:
	 *     dynamic?='+'?
	 */
	protected void sequence_ThisTypeRefNominal_TypeRefWithoutModifiers(ISerializationContext context, ThisTypeRefNominal semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypeRef returns ThisTypeRefNominal
	 *     TypeArgument returns ThisTypeRefNominal
	 *
	 * Constraint:
	 *     (dynamic?='+'? undefModifier=UndefModifierToken? nullModifier=NullModifierToken?)
	 */
	protected void sequence_ThisTypeRefNominal_TypeRef_TypeRefWithoutModifiers(ISerializationContext context, ThisTypeRefNominal semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypeDefs returns TypeDefs
	 *
	 * Constraint:
	 *     types+=Type+
	 */
	protected void sequence_TypeDefs(ISerializationContext context, TypeDefs semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypeRef returns UnionTypeExpression
	 *     TypeArgument returns UnionTypeExpression
	 *
	 * Constraint:
	 *     (typeRefs+=TypeRefWithoutModifiers typeRefs+=TypeRefWithoutModifiers* undefModifier=UndefModifierToken? nullModifier=NullModifierToken?)
	 */
	protected void sequence_TypeRef_UnionTypeExpression(ISerializationContext context, UnionTypeExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns TypeVariable
	 *     TypeVariable returns TypeVariable
	 *
	 * Constraint:
	 *     (name=IDENTIFIER (declaredUpperBounds+=ParameterizedTypeRef declaredUpperBounds+=ParameterizedTypeRef*)?)
	 */
	protected void sequence_TypeVariable(ISerializationContext context, TypeVariable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns UndefinedType
	 *     UndefinedType returns UndefinedType
	 *
	 * Constraint:
	 *     name='undefined'
	 */
	protected void sequence_UndefinedType(ISerializationContext context, UndefinedType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TypesPackage.Literals.IDENTIFIABLE_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TypesPackage.Literals.IDENTIFIABLE_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUndefinedTypeAccess().getNameUndefinedKeyword_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TypeRefWithoutModifiers returns UnionTypeExpression
	 *     TypeRefFunctionTypeExpression returns UnionTypeExpression
	 *     UnionTypeExpression returns UnionTypeExpression
	 *
	 * Constraint:
	 *     (typeRefs+=TypeRefWithoutModifiers typeRefs+=TypeRefWithoutModifiers*)
	 */
	protected void sequence_UnionTypeExpression(ISerializationContext context, UnionTypeExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns VirtualBaseType
	 *     VirtualBaseType returns VirtualBaseType
	 *
	 * Constraint:
	 *     (name=TypesIdentifier ownedMembers+=TMember*)
	 */
	protected void sequence_VirtualBaseType(ISerializationContext context, VirtualBaseType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns VoidType
	 *     VoidType returns VoidType
	 *
	 * Constraint:
	 *     name='void'
	 */
	protected void sequence_VoidType(ISerializationContext context, VoidType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TypesPackage.Literals.IDENTIFIABLE_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TypesPackage.Literals.IDENTIFIABLE_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVoidTypeAccess().getNameVoidKeyword_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     WildcardNewNotation returns Wildcard
	 *
	 * Constraint:
	 *     ((usingInOutNotation?='out' declaredUpperBound=TypeRef) | (usingInOutNotation?='in' declaredLowerBound=TypeRef))
	 */
	protected void sequence_WildcardNewNotation(ISerializationContext context, Wildcard semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Wildcard returns Wildcard
	 *
	 * Constraint:
	 *     (declaredUpperBound=TypeRef | declaredLowerBound=TypeRef)?
	 */
	protected void sequence_Wildcard(ISerializationContext context, Wildcard semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypeArgument returns Wildcard
	 *
	 * Constraint:
	 *     (
	 *         declaredUpperBound=TypeRef | 
	 *         declaredLowerBound=TypeRef | 
	 *         (usingInOutNotation?='out' declaredUpperBound=TypeRef) | 
	 *         (usingInOutNotation?='in' declaredLowerBound=TypeRef)
	 *     )?
	 */
	protected void sequence_Wildcard_WildcardNewNotation(ISerializationContext context, Wildcard semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
