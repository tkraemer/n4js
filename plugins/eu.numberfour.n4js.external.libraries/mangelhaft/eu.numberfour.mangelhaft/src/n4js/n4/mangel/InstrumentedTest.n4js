/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

import {IInstrumentedTest} from "n4/mangel/mangeltypes/IInstrumentedTest"
import {TestFunctionType} from "n4/mangel/mangeltypes/TestFunctionType"
import {TestInfo} from "n4/mangel/mangeltypes/TestInfo"
import {TestMethodDescriptor} from "n4/mangel/mangeltypes/TestMethodDescriptor"

function getAllPropertyNames (objProt: constructor{N4Object}, propNames: Map<string, boolean>?):Map<string, boolean> {
    propNames = propNames || new Map<string, boolean>;
    let  names = Object.getOwnPropertyNames(objProt as Object);

    names.forEach(function (name) {
        propNames.set(name, true);
    })
    return propNames;
}
export public class InstrumentedTest implements IInstrumentedTest{
    @Override public name: string;
    @Override public tests: Array<TestMethodDescriptor> = [];
    @Override public beforeAlls: Array<TestMethodDescriptor> = [];
    @Override public afterAlls: Array<TestMethodDescriptor> = [];
    @Override public befores: Array<TestMethodDescriptor> = [];
    @Override public afters: Array<TestMethodDescriptor> = [];
    @Override public testObject: N4Object;
    @Override public fqn: string = "";
    @Override public parent: IInstrumentedTest = null;
    /**
     * This is not a tree because we are only interested in the ancestors of a particular class
     * no siblings at any level.
     */
    @Override public child: IInstrumentedTest = null;
    @Override public error: any;
    private classIgnoreAnnotation: N4Annotation;
    @Override public filterTests(testNames: Array<string>) {
        this.tests = this.tests.filter(function(test) {
            return testNames.indexOf(test.name) !== -1
        })
    }


    public getTestMethodDescriptors(meths: Array<? extends N4Method>
                                                                     , tftype: TestFunctionType): Array<TestMethodDescriptor> {
        let that = this;
        return meths.map(
            function (methodDescriptor: N4Method) {
                let desc = methodDescriptor.anyAnnotation("Description")
                  , fixmeAnnotation = methodDescriptor.anyAnnotation("Fixme")
                  , ignoreAnnotation = that.classIgnoreAnnotation ? that.classIgnoreAnnotation: methodDescriptor.anyAnnotation("Ignore")
                  , timeoutAnnotation = methodDescriptor.anyAnnotation("Timeout")
                  , timeout = timeoutAnnotation && timeoutAnnotation.details? parseInt(timeoutAnnotation.details.pop()): 60 * 1000
                  , name: string
                  , description: string
                  , details: Array<?> = desc ? desc.details: []
                  , ignoreReason = ignoreAnnotation? ignoreAnnotation.details.join(" "): ""
                  , fixmeReason = fixmeAnnotation? fixmeAnnotation.details.join(" "): ""
                ;

                description = details.length ? details.join(" "): "";
                name =  methodDescriptor.name;
                return new TestMethodDescriptor({
                      timeout: timeout
                    , description: description
                    , ignore: !!ignoreAnnotation
                    , ignoreReason: ignoreReason
                    , fixme: !!fixmeAnnotation
                    , fixmeReason: fixmeReason
                    , name: name
                    , value: methodDescriptor.jsFunction as {function()}
                    , type:tftype
                });

            }
        )
    }
    @Override
    public setTestObject(test: N4Object): this {
        this.testObject = test;
        return this;
    }
    @Override public setError(error: any): this {
        this.error = error;
        return this;
    }

    @Override public load(testClass: constructor{N4Object}, info: TestInfo?): this {
        let that = this
          , props = getAllPropertyNames(testClass).keys()
          , parentClass = Object.getPrototypeOf(testClass as Object) as constructor{N4Object}
       ;
        this.classIgnoreAnnotation = testClass.n4type.allAnnotations("Ignore")[0];
        //console.log(testClass);
        this.beforeAlls = this.getTestMethodDescriptors(
            testClass.n4type.methodsWithAnnotation("BeforeAll", true, false, false),
            TestFunctionType.BEFORE_ALL
        )
        this.afterAlls = this.getTestMethodDescriptors(
            testClass.n4type.methodsWithAnnotation("AfterAll", true, false, false),
            TestFunctionType.AFTER_ALL
        )
        this.befores = this.getTestMethodDescriptors(
            testClass.n4type.methodsWithAnnotation("Before", true, false, false),
            TestFunctionType.BEFORE_TEST
        )
        this.afters = this.getTestMethodDescriptors(
            testClass.n4type.methodsWithAnnotation("After", true, false, false),
            TestFunctionType.AFTER_TEST
        )

        this.tests = this.getTestMethodDescriptors(
            // only for tests we need inherited methods
            testClass.n4type.methodsWithAnnotation("Test", true, true, false),
            TestFunctionType.TEST
        )
        if (info) {
            this.fqn = info.fqn;
        }
        this.fqn = this.fqn || testClass.n4type.fqn;
        this.name = this.fqn;
        if (info && info.testMethods && info.testMethods.length) {
          this.tests = this.tests.filter(function(test) {
                return info.testMethods.indexOf(test.name) !== -1
            })
        }
        if (parentClass !== Object) {
            this.parent = new InstrumentedTest().load(parentClass);
            this.parent.child = this;
        }

        return this;
    }
}
/*
-*- mode: typescript;-*-
*/
