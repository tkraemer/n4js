/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
import {InstrumentedTest} from "n4/mangel/InstrumentedTest"
import {TestExecutor} from "n4/mangel/TestExecutor"
import {ITestReporter} from "n4/mangel/mangeltypes/ITestReporter"
import {ResultGroup} from "n4/mangel/mangeltypes/ResultGroup"
import {ResultGroups} from "n4/mangel/mangeltypes/ResultGroups"
import {TestFunctionType} from "n4/mangel/mangeltypes/TestFunctionType"
import {TestInfo} from "n4/mangel/mangeltypes/TestInfo"
import {TestInfos} from "n4/mangel/mangeltypes/TestInfos"
import {TestMethodDescriptor} from "n4/mangel/mangeltypes/TestMethodDescriptor"
import {TestResult} from "n4/mangel/mangeltypes/TestResult"
import {TestSpy} from "n4/mangel/mangeltypes/TestSpy"
import {PreconditionNotMet} from "n4/mangel/precondition/PreconditionNotMet"
import {N4Injector} from "n4js/lang/N4Injector"

export public class TestController {
    static MAX_GROUPS_PER_TEST_BATCH = 10;
    @Inject
    private spy: TestSpy;
    @Inject
    private executor: TestExecutor;
    @Inject
    private injector: N4Injector;
    private reportersVal: Array<? extends ITestReporter> = [];
    public set reporters(reporters: Array<? extends ITestReporter>) {
        reporters.forEach(function(reporter) {
            let dummy: Promise<any, ?> = reporter.register();
        })
        this.reportersVal = reporters;
    }

    private async errorGroup(info: TestInfo, loadPath: string, testObject: InstrumentedTest?, originalError: any?) {
        let emptyTest: TestMethodDescriptor
          , error = originalError ? originalError: new Error("could not load test " + loadPath)
          , that = this
          , testResult: TestResult
          , testResults: Array<TestResult> = []
          , unknownTest: TestMethodDescriptor = new TestMethodDescriptor({
                                                string name: ""
                                                , type:TestFunctionType.TEST
                                                , value:function(){}
                                             });
            ;
        if (!testObject) {
            testObject = new InstrumentedTest();
            info.module = info.module || "";
            info.fqn = info.fqn || info.module.replace(/\//g, ".") + ".*";
            testObject.load(N4Object, info).setTestObject(new N4Object());
            testObject.tests = info.testMethods? info.testMethods.map(
                function(methName: string):TestMethodDescriptor {
                    return new TestMethodDescriptor({
                                                  string name: methName
                                                , type: TestFunctionType.TEST
                                                , value: function(){}
                                             });
            }):[unknownTest]

        }
        await this.spy.groupStarted.dispatch([testObject]);

        for (let test of testObject.tests) {
            await that.spy.testStarted.dispatch([testObject, test]);
            testResult = TestExecutor.generateFailureTestResult(error, "could not load test " + loadPath);
            testResults.push(testResult);
            await that.spy.testFinished.dispatch([testObject, test, testResult]);
        }
        await this.spy.groupFinished.dispatch([testObject, new ResultGroup(testResults, info.fqn)]);
        return true;
    }

    private async instrument(info: TestInfo): Array<InstrumentedTest> {
        let parts: Array<string>
          , ctorName: string
          , groupModule: any+
          , groupCTORs: Array<constructor{N4Object}>
          , groupCTOR: constructor{N4Object}
          , instrumentedTestObjects: Array<InstrumentedTest> = []
          , instrumentedTestObject: InstrumentedTest
          , moduleName: string
        ;

        parts = info.fqn.split("\.");
        ctorName = parts.pop();
        moduleName = parts.join("/");
        try {
            groupModule = System.throwPendingError(await System.import(info.origin +  "/" + moduleName));
        } catch (ex) {
            await this.errorGroup(info, info.origin +  "/" + moduleName,null, ex);
            return null;
        }
        groupCTORs = [groupModule[ctorName] as constructor{N4Object}];
        if (groupCTORs) {
            instrumentedTestObjects = [];
            for (groupCTOR of groupCTORs) {
                instrumentedTestObject = new InstrumentedTest();
                if (!groupCTOR) {
                    await this.errorGroup(info, info.origin +  "/" + moduleName,null, new Error("Empty object loaded (is the test class exported?)"));
                    continue;
                } else {
                    instrumentedTestObject.load(groupCTOR, info);
                    if (info.testMethods) {
                        instrumentedTestObject.filterTests(info.testMethods);
                    }

                    try {
                        let testClass = groupCTOR,
                            diClass = testClass;
                        let testInjector: N4Injector;
                        let testType = testClass.n4type;

                        for (; testType; testType = testType.n4superType, diClass = (diClass as Object)["__proto__"] as constructor{N4Object}) {
                            if (testType.allAnnotations("GenerateInjector").length) {
                                if (testType.allAnnotations("WithParentInjector").length) {
                                    if (!this.injector.canBeParentOf(diClass)) {
                                        throw new PreconditionNotMet("Test called with incompatible parent injector");
                                    }
                                    testInjector = N4Injector.of.call(N4Injector, diClass, this.injector) as N4Injector;
                                }else{
                                    testInjector = N4Injector.of.call(N4Injector, diClass) as N4Injector;
                                }
                                break;
                            }
                        }
                        if (!testType) {
                            testInjector = this.injector;
                        }
                        instrumentedTestObject.setTestObject(testInjector.create(testClass));
                    } catch(ex2) {
                        instrumentedTestObject
                            .setTestObject(new N4Object())
                            .setError(ex2);
                    }
                }
                instrumentedTestObjects.push(instrumentedTestObject);
            }
        } else {
            await this.errorGroup(info, info.origin +  "/" + parts.join("/"));
            return null;
        }
        let arr = (await Promise.all(instrumentedTestObjects)).filter((item) => item !== null);
        return (arr as any) as Array<InstrumentedTest>;
    }

    public async runGroups(testInfoObject: TestInfos, numTests: number?): ResultGroups {
        if (!testInfoObject) {
            throw new Error("TestController::runGroups called with a null testInfoObject");
        }
        let executor: TestExecutor = this.executor
          , that = this
          , reses: Array<ResultGroups> = []
          , res: ResultGroups
          , testInfos: Array<TestInfo> = testInfoObject.testDescriptors
          , batchedTestInfos: Array<Array<TestInfo>> = []
          , ii: number = 0
          , groupCTORs: Array<?>
          , modules: Array<string>
          , testInfosBatch: Array<TestInfo>
          , instrumentedTestsBatch2d: Array<Array<InstrumentedTest>>
          , instrumentedTestsBatch: Array<InstrumentedTest>
          , fixme: any
        ;
        if (numTests === undefined) {
            numTests = testInfoObject.testDescriptors.reduce(function(acc, info: TestInfo) {
                return acc + info.testMethods.length;
            }, 0)
        }
        testInfoObject.testDescriptors = testInfoObject.testDescriptors.sort((x: TestInfo,y: TestInfo) => {
            let xVal = x.fqn ? x.fqn: x.module
            , yVal = y.fqn ? y.fqn: y.module
            return xVal.localeCompare(yVal);
        })
        try {
            await this.spy.testingStarted.dispatch([testInfos.length, testInfoObject.sessionId, numTests]);
        } catch(ex) {
            console.log("testingStarted.dispatch is bad", ex);
        }
        for (ii=0; ii < testInfos.length; ii += TestController.MAX_GROUPS_PER_TEST_BATCH) {
            batchedTestInfos.push(
                testInfos.slice(ii, ii + TestController.MAX_GROUPS_PER_TEST_BATCH)
            );
        }
        for (ii = 0, instrumentedTestsBatch = []; ii < batchedTestInfos.length; ++ii, instrumentedTestsBatch = []) {
            testInfosBatch = batchedTestInfos[ii]
            try {
                fixme = await (await Promise.all(testInfosBatch
                                            .map(this.instrument.bind(this))
                                            .filter(function(test) {return test !== null})));
                instrumentedTestsBatch2d = fixme as Array<Array<InstrumentedTest>>;
                //flatten array
                instrumentedTestsBatch =  (Array.prototype.concat.apply([], instrumentedTestsBatch2d) as Array<InstrumentedTest>)

                //instrumentedTests = that.<Array<InstrumentedTest>>dirtyCast(await Promise.all(blast));
                res = await executor.runTestsAsync(instrumentedTestsBatch);
                reses.push(res);
            } catch (er) {
                console.error(er);
                throw er;
            }
        };
        res = ResultGroups.concatArray(reses);
        await this.spy.testingFinished.dispatch([res]);
        return res;
    }
}
/*
-*- mode: typescript;-*-
*/

