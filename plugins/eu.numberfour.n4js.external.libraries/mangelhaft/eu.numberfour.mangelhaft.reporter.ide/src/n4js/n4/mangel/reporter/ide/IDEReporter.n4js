/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
import {IInstrumentedTest} from "n4/mangel/mangeltypes/IInstrumentedTest"
import {ITestReporter} from "n4/mangel/mangeltypes/ITestReporter"
import {ResultGroups} from "n4/mangel/mangeltypes/ResultGroups"
import {TestMethodDescriptor} from "n4/mangel/mangeltypes/TestMethodDescriptor"
import {TestResult} from "n4/mangel/mangeltypes/TestResult"
import {TestSpy} from "n4/mangel/mangeltypes/TestSpy"
import {Method} from "fetch/Method"

export public class IDEReporter implements ITestReporter {

    private endpointValue: string = "MISSING_REQUIRED_ENDPOINT";
    public get endpoint(): string {
        return this.endpointValue;
    }
    public set endpoint(endpoint: string) {
        this.endpointValue = endpoint.replace(/\/+$/, "");
    }
    public timeoutBuffer: number = 1000 * 30;
    public fetch = fetch;

    @Override
    @Inject
    protected spy: TestSpy;

    public async send(uri: string, method: Method, headers: union{Headers,Array<Array<string>>,Object}, body: Object) {
        let ret: Response,
            bodyStr: string;

        try {
            bodyStr = JSON.stringify(body, (key: string, value: any) => {
                       if (key === "description") {
                           value = undefined;
                       }
                       return value;
                   }, 2)
            ret = await this.fetch.call(null, this.endpoint + uri, {
                   Method method: method,
                   union{Headers,Array<Array<string>>,Object} headers: headers,
                   string body: bodyStr
            }) as Response;
        }catch(er) {
            let err: Error+ = er as Error;
            console.error(err);
            console.error(err.stack);
        }

        if (ret) {
            //console.log(ret.url, ret.status);
            if (Math.floor(ret.status / 100) != 2) {
                console.error("STATUS:", ret.status, ret.statusText, uri);
                if (bodyStr) {
                    console.error("BODY:" + bodyStr);
                }
            }
        }
        return ret;
    }
    /**
     * CTOR
     * @param endpoint endpoint prefix for ide (the base of the rest api)
     * @param timeoutBufferOverride if set overrides the default timeout added to each test as a buffer
     */
    constructor(endpoint: string?, timeoutBufferOverride: number?) {
        if (endpoint) {
            this.endpoint = endpoint.replace(/\/+$/, "");
        }
        if (timeoutBufferOverride !== undefined) {
            this.timeoutBuffer = timeoutBufferOverride;
        }
    }
    @Override public async register() {
        let that = this
            , sessionId: string = null
        ;
        async function handleTestingStart(numAllGroups: number, sid: string, numAllTests: number) {
            sessionId = sid
            let response = await that.send(  ["/n4.ide/testing/sessions", sessionId, "start"].join("/")
                        ,Method.POST
                        , { "Content-Type": "application/vnd.n4.ide.start_session_req.tm+json"
                            , "Accept": "application/json"
                        }
                        , undefined
            );
            return response;
        }
        this.spy.testingStarted.add(handleTestingStart);
//        this.spy.groupStarted.add(function (group: IInstrumentedTest) {
//        });

        async function handleTestStart(group: IInstrumentedTest, test: TestMethodDescriptor) {
            if (!sessionId) {
                throw new Error("Test start sent before session start")
            }
            let response = await that.send(
                        ["/n4.ide/testing/sessions", sessionId, "tests", group.name + "%23" + test.name, "start"].join("/")
                        , Method.POST
                        , { "Content-Type": "application/vnd.n4.ide.start_test_req.tm+json"
                            , "Accept": "application/json"
                        }
                        , {number timeout: test.timeout + that.timeoutBuffer}
            );
        }
        this.spy.testStarted.add(handleTestStart);

        async function handleTestFinished (group: IInstrumentedTest, test: TestMethodDescriptor, testResult: TestResult) {
            if (!sessionId) {
                throw new Error("Test end sent outside active session")
            }

            let response = await that.send(
                        ["/n4.ide/testing/sessions", sessionId, "tests", group.name + "%23" + test.name, "end"].join("/")
                        , Method.POST
                        , { "Content-Type": "application/vnd.n4.ide.end_test_req.tm+json"
                            , "Accept": "application/json"
                        }

                        , testResult
            );
        }
        this.spy.testFinished.add(handleTestFinished);

        async function handleTestingFinished(resultGroups: ResultGroups) {
            let response = await that.send(  ["/n4.ide/testing/sessions", sessionId, "end"].join("/")
                        ,Method.POST
                        , { "Content-Type": "application/vnd.n4.ide.end_session_req.tm+json"
                            , "Accept": "application/json"
                        }
                        , undefined
            );
            return response;
        }
        this.spy.testingFinished.add(handleTestingFinished);
        return this;
    }
}
