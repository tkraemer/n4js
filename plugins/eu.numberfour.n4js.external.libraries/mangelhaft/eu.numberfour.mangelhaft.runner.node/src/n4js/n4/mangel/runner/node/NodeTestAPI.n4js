/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
import NodeTestOptions from "n4/mangel/runner/node/NodeTestOptions"
import NodeTestCLI from "n4/mangel/runner/node/NodeTestCLI"
import * as child_process from "child_process"
import * as lib_fs from "fs"
import * as os from "os"
import * as lib_path from "path"
import * as n4mf_parser from "n4mf-parser"
import * as n4js_cli from "n4js-cli";

const requireResolve = (System._nodeRequire as Object)["resolve"] as {function(string): string};
const MANIFEST_N4MF = "manifest.n4mf";

export public async function mkdirp(path: string, mode: int?): void {
    if (!(await lib_fs.exists(path))) {
        await mkdirp(path.substring(0, path.lastIndexOf(lib_path.sep)), mode);
        await lib_fs.mkdir(path, mode);
    }
}

let count = Date.now();
export public async function createTempDir(): string {
    let tempDir = lib_path.join(os.tmpdir(), "n4js-mangelhaft-" + count++);
    await lib_fs.mkdir(tempDir);
    // TODO: switch to mkdtemp since 5.10
    //tempDir = await lib_fs.mkdtemp(tempDir);
    return tempDir;
}

function detectProjectDir(npm: string): string {
    let p = requireResolve(`${npm}/package.json`);
    return p.substring(0, p.lastIndexOf(lib_path.sep));
}

// TODO watch for https://github.com/NumberFour/n4js/issues/167
const coreLibs = [
    "n4js.lang",
    "eu.numberfour.mangelhaft.assert"];

const rtLibs = [
    "n4js-runtime-es2015",
    "n4js-runtime-esnext",
    "n4js-runtime-fetch",
    "n4js-runtime-n4",
    "n4js-runtime-v8",
    "n4js-runtime-node"];

export default public class NodeTestAPI {
    /**
     * Executes a test run (might include compilation) with the given set of test options.
     */
    public static async exec(options: NodeTestOptions): void {
        let idToManifest = new Map<string, Object>(),
            prjToManifest = new Map<string, Object>();

        async function addManifest(dir: string): void {
            let manifest = await n4mf_parser.readManifest(lib_path.join(dir, MANIFEST_N4MF));
            idToManifest.set(manifest["ArtifactId"] as string, manifest);
            prjToManifest.set(dir, manifest);
        }

        for (let dir of (options.projects || [])) {
            await addManifest(dir);
        }

        for (let dir of (options.scan || [])) {
            for (let p of await lib_fs.readdir(dir)) {
                let prj = lib_path.join(dir, p),
                    stat = await lib_fs.stat(prj);
                if (stat.isDirectory() && (await lib_fs.exists(lib_path.join(prj, MANIFEST_N4MF)))) {
                    await addManifest(prj);
                }
            }
        }

        // TODO remove once fixed https://github.com/NumberFour/n4js/issues/167
        for (let id of coreLibs) {
            if (!idToManifest.has(id)) {
                await addManifest(detectProjectDir(id));
            }
        }

        if (options.debug) {
            console.log("projects:", Array.from(prjToManifest.keys()));
        }

        if (options.compile) { // call n4jsc
            if (options.testCatalog.startsWith("http://")) { // use temp file
                options.testCatalog = lib_path.join(await createTempDir(), "catalog.json");
            }

            // TODO: make sure dir exists, otherwise n4jsc fails
            if (options.targetPlatformInstallLocation) {
                await mkdirp(options.targetPlatformInstallLocation);
            } else {
                options.targetPlatformInstallLocation = await createTempDir();
            }

            // add rtlib projects just for compilation, unless given:
            let projects = Array.from(prjToManifest.keys()).concat(
                rtLibs.filter(id => !idToManifest.has(id))
                      .map(detectProjectDir));

            await n4js_cli.n4jsc({
                t: "projects",
                testCatalogFile: options.testCatalog,
                targetPlatformFile: options.targetPlatformFile,
                targetPlatformInstallLocation: options.targetPlatformInstallLocation,
                targetPlatformSkipInstall: options.targetPlatformSkipInstall,
                nodejsLocation: process.execArgv[0],
                debug: options.debug
            }, projects);
        }
        
        // spawn test runner process:
        // collect all output paths:
        let nodePath: Array<string> = [];
        for (let [dir, manifest] of prjToManifest) {
            let out = manifest["Output"] as string;
            if (out) {
                nodePath.push(lib_path.join(dir, manifest["Output"] as string, "es"));
            }
        }
        if (options.targetPlatformInstallLocation) {
            nodePath.push(lib_path.join(options.targetPlatformInstallLocation, "node_modules"));
        }
        if (process.env.NODE_PATH) { // append existing
            nodePath.push(process.env.NODE_PATH as string);
        }

        let env = Object.assign({}, process.env, {
            NODE_PATH: nodePath.join(lib_path.delimiter)
        });

        let n4type = this.n4type,
            consoleTestRunner = n4type.fqn.split(".");
        consoleTestRunner.pop();
        consoleTestRunner.pop();
        consoleTestRunner.unshift(n4type.origin);
        consoleTestRunner.push("NodeTestRunner:");

        let args = NodeTestCLI.toCommandLine(options);
        args.unshift(consoleTestRunner.join("/"));

        (options.define || []).forEach(kv => {
            let pair = kv.split("=");
            env["N4JS_RT_" + pair[0].replace(/-/g, "_")] = (pair[1] || "");
        });

        if (options.debug) {
            console.log("env:", env);
            console.log("args:", args);
        }

        await new Promise<any, any>((resolve, reject) => {
            child_process.fork(requireResolve("n4js-node/n4js-cli"), args, {
                env: env
            }).on("close", code => {
                if (code === 0) {
                    resolve(code);
                } else {
                    reject(code);
                }
            });
        });
    }
}

/* -*- mode: typescript;-*- */