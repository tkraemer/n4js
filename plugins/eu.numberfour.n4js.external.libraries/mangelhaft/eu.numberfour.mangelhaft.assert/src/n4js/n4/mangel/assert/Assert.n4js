/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 * 
 * 3rd Party Code used here:
 * - [node-deep-equal](https://github.com/substack/node-deep-equal), [MIT](https://raw.githubusercontent.com/substack/node-deep-equal/master/LICENSE)
 * - [Node.js Assert Library](https://raw.githubusercontent.com/nodejs/node/master/lib/assert.js), [MIT like](https://raw.githubusercontent.com/nodejs/node/master/lib/assert.js)
 */


import {AssertionError} from "n4/mangel/assert/AssertionError"
import {ErrorPrimitiveType} from "n4/mangel/assert/ErrorPrimitiveType"
import {PreconditionNotMet} from "n4/mangel/precondition/PreconditionNotMet"
import {decycle} from "n4/mangel/assert/Decycle"

function getTypeOf(type: type{Object}): N4Class {
    return ((type as Object)["n4type"] || null) as N4Class;
}
function getTypeName(type: type{Object}): string {
    let t = getTypeOf(type);
    return t ? t.fqn: "";
}

function _isInstanceOf(target: any, type: type{Object}): boolean {
    if (typeof target !== "object") {
        return false;
    }

    if (typeof type === "object") { // interface type
        return getTypeOf((target as Object).constructor).allImplementedInterfaces.indexOf(getTypeName(type)) >= 0;
    }
    return target instanceof type;
}

export public const DEFAULT_TIMEOUT = 1000;
export public const DEFAULT_POLLING_INTERVAL = 50;

function replacer(key: string, value: any) {
  if (value === undefined) {
    return '' + value;
  }
  if (typeof value === 'number' && (isNaN(value as number) || !isFinite(value as number))) {
    return (value as number).toString();
  }
  if (typeof value === 'function' || value instanceof RegExp) {
    return (value as RegExp).toString();
  }
  return value;
}

function truncate(s: string, n: number) {
  if (typeof s == 'string') {
    return s.length < n ? s: s.slice(0, n);
  } else {
    return s;
  }
}
function isUndefinedOrNull(value) {
  return value === null || value === undefined;
}

function isArguments(object: Object) {
  return Object.getPrototypeOf({}).toString.call(object) == '[object Arguments]';
}
let pSlice = [].slice;

const Object_keys = typeof Object.keys === 'function'
    ? Object.keys
   : function (obj) {
        let keys: Array<string> = [];
        for (let key: string in obj as Object) keys.push(key);
        return keys;
    }
;

function objEquiv(aAny: any, bAny: any, ignorePrototype: boolean?): boolean {
    let a = aAny as Object,
        b = bAny as Object,
        ka: Array<string>, kb: Array<string>,
        key: string, i: int;

    if (isUndefinedOrNull(a) || isUndefinedOrNull(b))
        return false;
    if (!ignorePrototype && (a["prototype"] !== b["prototype"])){
        return false;
    }

    if (isArguments(a)) {
        if (!isArguments(b)) {
            return false;
        }
        a = pSlice.call(a) as Object;
        b = pSlice.call(b) as Object;
        return _deepEqual(a, b, ignorePrototype);
    }
    try {
        ka = Object_keys(a);
        kb = Object_keys(b);
    } catch (e) {
        return false;
    }

    if (ka.length != kb.length)
        return false;
    ka.sort();
    kb.sort();
    for (i = ka.length - 1; i >= 0; i--) {
        if (ka[i] != kb[i]) {
            return false;
        }
    }

    for (i = ka.length - 1; i >= 0; i--) {
        key = ka[i];
        if (!_deepEqual(a[key], b[key], ignorePrototype)) return false;
    }
    return true;
}

function  _deepEqual(actual: any, expected: any, ignorePrototype: boolean?):boolean {
  if (actual === expected) {
    return true;

  } else if (actual instanceof Date && expected instanceof Date) {
    return (actual as Date).getTime() === (expected as Date).getTime();

  } else if (actual instanceof RegExp && expected instanceof RegExp) {
    let actualRegExp = actual as RegExp
        ,expectedRegExp = expected as RegExp;
    return actualRegExp.source === expectedRegExp.source &&
           actualRegExp.global === expectedRegExp.global &&
           actualRegExp.multiline === expectedRegExp.multiline &&
           actualRegExp.lastIndex === expectedRegExp.lastIndex &&
           actualRegExp.ignoreCase === expectedRegExp.ignoreCase;

  } else if (typeof actual != 'object' && typeof expected != 'object') {
    return actual == expected;

  } else {
    return objEquiv(actual, expected, ignorePrototype);
  }
}



function expectedException(actual: any, expected: union{ErrorPrimitiveType, type{Object}}) {
    if (typeof expected === "string") {
        return ((typeof actual) === expected as string);
    }
    if (Object.getPrototypeOf({}).toString.call(expected) == '[object RegExp]') {
        return (expected as RegExp).test((actual as Object).toString());
    } else if (actual instanceof expected as type{Object}) {
        return true;
    } else if (typeof expected === "function" && (expected as Function).call({}, actual) === true) {
        return true;
    }
    return false;
}

/**
 * Assert class contains statics to assert truths used in tests
 */
@TestAPI
export public class Assert {

    private const RETHROWN_SPECIAL_ERROR_TYPES = [  N4ApiNotImplementedError
                                                  , PreconditionNotMet
                                                 ];
    private static rethrowIfSpecialError(error: any, expected: any?) {
        let objError: Object
          , ctor: type{Object}
        ;
        if (error !== null && typeof error === "object") {
            objError = error as Object;
            ctor = objError.constructor;
            if (ctor !== expected && this.RETHROWN_SPECIAL_ERROR_TYPES.indexOf(ctor) !== -1) {
                throw error;
            }
        }
    }

    /**
     * Throws an exception that displays the values for actual and expected separated by the provided operator.
     * @param  actual             actual result
     * @param  expected           expected result
     * @param  message            optional message
     * @param  operator           operator tested
     * @param  stackStartFunction top level function
     */
    protected static fail_(actual: any
                        , expected: any
                        , message: string?
                        , operator: string?
                        , stackStartFunction: Function?
    ) {
        let error = new AssertionError({
            string message: message,
            any actual: actual,
            any expected: expected,
            string operator: operator,
            stackStartFunction: stackStartFunction
        });
        throw error;
    }

    public static fail(message: string, error: any?) {
        this.fail_(error, null, message, null, this.fail);
    }

    /**
     * Tests if value is truthy, it is equivalent to assert.equal(true, !!value, message);
     * @param  value   value to test
     * @param  message optional message describing what was being tested
     */
    public static ok(value: any, message: string) {
        if(!!!value) {
            this.fail_(value, true, message, '==', this.ok)
        }
    }
    /**
     * Tests shallow, coercive equality with the equal comparison operator ( == ).
     * @param  actual   actual value to be tested
     * @param  expected expected value (what actual should be)
     * @param  message  optional message describing what was tested
     */
    public static equal (actual: any, expected: any, message: string?) {
        if (actual != expected) {
            this.fail_(actual, expected, message, '==', this.equal);
        }
    }
    /**
     * Tests if actual is greater than ( > operator) expected
     */
    public static greaterThan(actual: union{number,string,boolean}, expected: union{number,string,boolean}, message: string?) {
        if (!(actual > expected)) {
            this.fail_(actual, expected, message, '>', this.greaterThan);
        }
    }
    /**
     * Tests if actual is less than ( < operator) expected
     */
    public static lessThan(actual: union{number,string,boolean}, expected: union{number,string,boolean}, message: string?) {
        if (!(actual < expected)) {
            this.fail_(actual, expected, message, '<', this.lessThan);
        }
    }

    /**
     * Tests if actual is greater than or equal( >= operator) expected
     */
    public static greaterThanOrEqual(actual: union{number,string,boolean}, expected: union{number,string,boolean}, message: string?) {
        if (!(actual >= expected)) {
            this.fail_(actual, expected, message, '>', this.greaterThanOrEqual);
        }
    }
    /**
     * Tests if actual is less than or equal ( <= operator) expected
     */
    public static lessThanOrEqual(actual: union{number,string,boolean}, expected: union{number,string,boolean}, message: string?) {
        if (!(actual <= expected)) {
            this.fail_(actual, expected, message, '<', this.lessThanOrEqual);
        }
    }
    /**
     * Tests if actual is strictly equal to null
     */
    public static isNull(actual: any, message: string?) {
        if (actual !== null) {
            this.fail_(actual, null, message, "=== null", this.isNull);
        }
    }
    /**
     * tests if actual is strictly equal to Undefined
     */
    public static isUndefined(actual: any, message: string?) {
        let undef;
        if (actual !== undef) {
            this.fail_(actual, null, message, "=== undefined", this.isUndefined);
        }
    }
    /**
     * tests if actual is strictly not equal to null
     */
    public static isNotNull(actual: any, message: string?) {
        if (actual === null) {
            this.fail_(actual, null, message, "!== null", this.isNotNull);
        }
    }
    /**
     * tests if actual is strictly not equal to undefined
     */
    public static isNotUndefined(actual: any, message: string?) {
        let undef;
        if (actual === undef) {
            this.fail_(actual, null, message, "!== undefined", this.isNotUndefined);
        }
    }
    /**
     * Tests if actual is strictly equal to null or undefined
     */
    public static isNullOrUndefined(actual: any, message: string?) {
        let undef;
        if (!(actual === null || actual === undef)) {
            this.fail_(actual, null, message, "=== null || undefined", this.isNullOrUndefined);
        }
    }
    /**
     * Tests if actual is not strictly equal to null or undefined
     */
    public static isNotNullOrUndefined(actual: any, message: string?) {
        let undef;
        if ((actual === null || actual === undefined)) {
            this.fail_(actual, null, message, "!== null || undefined", this.isNotNullOrUndefined);
        }
    }

    /**
     * Tests shallow, coercive equality with the equal comparison operator ( == ).
     * @param  actual   actual value to be tested
     * @param  expected expected value (what actual should be)
     * @param  message  optional message describing what was tested
     */
    public static notEqual(actual: any, expected: any, message: string?) {
        if (actual == expected) {
            this.fail_(actual, expected, message, '!=', this.notEqual);
        }
    }

    /**
     * deep test for equality that ensures entire object is equal
     * @param  actual   actual value to be tested
     * @param  expected expected value (what actual should be)
     * @param  message  optional message describing what was tested
     * @param ignorePrototype optional flag to not test for prototypical identicalness
     */
    public static deepEqual(actual: any, expected: any, message: string?, ignorePrototype: boolean?) {
        actual = decycle(actual);
        expected = decycle(expected);

        if (!_deepEqual(actual, expected, ignorePrototype)) {
            try {
                message += "\n " + JSON.stringify({actual: actual, expected: expected}, null, "    ");
            } catch(err) {
                message += "\n unable to calculate diff";
            }
            this.fail_(actual, expected, message, 'deepEqual', this.deepEqual);
        }
    }

    /**
     * deep test for inequality that ensures some part of object is inequal
     * @param  actual   actual value to be tested
     * @param  expected expected value (what actual should be)
     * @param  message  optional message describing what was tested
     * @param ignorePrototype optional flag to not test for prototypical identicalness
     */
    public static notDeepEqual(actual: any, expected: any, message: string?, ignorePrototype: boolean?) {
        if (_deepEqual(actual, expected, ignorePrototype)) {
            this.fail_(actual, expected, message, 'NotDeepEqual', this.deepEqual);
        }
    }
    /**
     * Tests shallow, strict equality with the strict equal comparison operator ( === ).
     * @param  actual   actual value to be tested
     * @param  expected expected value (what actual should be)
     * @param  message  optional message describing what was tested
     */
    public static strictEqual (actual: any, expected: any, message: string?) {
        if (!(actual === expected)) {
            this.fail_(actual, expected, message, '===', this.strictEqual);
        }
    }
    /**
     * Tests shallow, strict inequality with the strict unequal comparison operator ( !== ).
     * @param  actual   actual value to be tested
     * @param  expected expected value (what actual should be)
     * @param  message  optional message describing what was tested
     */
    public static notStrictEqual (actual: any, expected: any, message: string?) {
        if (!(actual !== expected)) {
            this.fail_(actual, expected, message, '!==', this.notStrictEqual);
        }
    }

    /**
     * Tests if truthy.
     * @param  actual   actual value to be tested
     * @param  message  optional message describing what was tested
     */
    public static isTrue (actual: any, message: string?) {
        if(!(!!actual)) {
            this.fail_(actual, true, message, "== true", this.isTrue)
        }
    }
    /**
     * Tests if not truthy.
     * @param  actual   actual value to be tested
     * @param  message  optional message describing what was tested
     */
    public static isFalse (actual: any, message: string?) {
        if(!!actual) {
            this.fail_(actual, true, message, "!== true", this.isFalse)
        }
    }

    /**
     * checks that the actual object is an instance of the expected object
     */
    public static isInstanceOf(actual: any, expected: type{Object}, message: string?) {
        if (!_isInstanceOf(actual, expected)) {
            let actualName: string = getTypeName((actual as Object).constructor),
                expectedName: string = getTypeName(expected);
            this.fail_(actualName, expectedName, message, "instanceof", this.isInstanceOf);
        }
    }

    /**
     * checks that the actual object is not an instance of the expected object
     */
    public static isNotInstanceOf(actual: any, expected: type{Object}, message: string?) {
        if (_isInstanceOf(actual, expected)) {
            let actualName: string = getTypeName((actual as Object).constructor),
                expectedName: string = getTypeName(expected);
            this.fail_(actualName, expectedName, message, "not instanceof", this.isInstanceOf);
        }
    }

    /**
     * ensures provided function throws
     * @param  testFunction function to test. should be callable without arguments
     * @param  error        optional error if provided will ensure the thrown error is of the same type.
     * @param  message      optional message describing what was tested
     */
    public static throws (testFunction: {function()}, error: union{ErrorPrimitiveType, type{Object}}?, message: string?): any {
        let actual: any+
          , threw = false;
        try {
            testFunction();
        } catch (e) {
            threw = true;
            actual = e;
        }
        if (!threw) {
            this.fail_(null, null, message, "throws", this.throws);
        }
        return this.thrownCheck(true, actual, error, message, "throws", this.throws);
    }
    /**
     * ensures provided function does not throws
     * @param  testFunction function to test. should be callable without arguments
     * @param  error        optional error if provided will ensure the thrown error is of the same type.
     * @param  message      optional message describing what was tested
     */
    public static doesNotThrow(testFunction: {function()}, error: union{ErrorPrimitiveType, type{Object}}?, message: string?) {
        let actual: any+
          , threw = false;

        try {
            testFunction();
        } catch (e) {
            threw = true;
            actual = e;
            this.rethrowIfSpecialError(actual, error);
        }
        if (threw) {
            this.fail_(actual, null, message, "does not throw", this.doesNotThrow);
        }
    }
    /**
     * ensures provided function throws only async
     * @param  testFunction function to test. should be callable without arguments
     * @param  expectedErrorType        optional error if provided will ensure the thrown error is of the same type.
     * @param  message      optional message describing what was tested
     */
    public static async throwsAsync (testFunction: {function()}, expectedErrorType: union{ErrorPrimitiveType, type{Object}}?, message: string?): any {
        let actual: any+
          , threw = false
        ;
        try {
            await testFunction();
        } catch (e) {
            threw = true;
            actual = e;
        }
        if (!threw) {
            this.fail_(null, null, message, "throws", this.throwsAsync);
        }
        return this.thrownCheck(true, actual, expectedErrorType, message, "throws", this.throwsAsync);
    }
    /**
     * ensures provided function does not throw only async
     * @param  testFunction function to test. should be callable without arguments
     * @param  error        optional error if provided will ensure the thrown error is of the same type.
     * @param  message      optional message describing what was tested
     */
    public static async doesNotThrowAsync(testFunction: {function()}, error: union{ErrorPrimitiveType, type{Object}}?, message: string?) {
        let actual: any+
          , threw = false;
        try {
            await testFunction();
        } catch (e) {
            threw = true;
            actual = e;
            this.rethrowIfSpecialError(actual, error);
        }

        if (threw) {
            this.fail_(actual, null, message, "does not throw", this.doesNotThrowAsync);
        }
    }

    /**
     * Polls the given function for a truthy result.
     *
     * In case you have an asymchronous predicate function the following code is probably helpful:
     * <pre>
     * while (true) {
     *     if (await myPredicatFn()) { break; }
     * }
     * </pre>
     *
     * @param resultFn predicate function to test
     * @param message optional message describing what was tested
     * @param timeoutMillisecs optional timeout in millisecs
     * @param intervalMillisecs optional polling interval in millisecs
     */
    public static <T> waitForCondition(resultFn: {function(): T?}, message: string?, timeoutMillisecs: number?, intervalMillisecs: number?): Promise<T, any> {
        timeoutMillisecs = timeoutMillisecs || DEFAULT_TIMEOUT;
        intervalMillisecs = intervalMillisecs || DEFAULT_POLLING_INTERVAL;

        return new Promise<T, any>(function(resolveFn: {function(T): void}, rejectFn: {function(any): void}) {
            timeoutMillisecs += Date.now();

            let handle = setInterval(function() {
                try {
                    let res = resultFn();
                    if (res) { // truthy
                        clearInterval(handle);
                        resolveFn(res);
                    } else {
                        let now = Date.now();
                        if (now >= timeoutMillisecs) {
                            throw new Error(message ? message + ": condition timeout": "condition timeout");
                        }
                    }
                } catch (exc) { // reject on any error
                    clearInterval(handle);
                    rejectFn(exc);
                }
            }, intervalMillisecs);
        });
    }

    private static thrownCheck(shouldThrow: boolean, actual: any+, expected: union{ErrorPrimitiveType, type{Object}}?, message: string?, operator: string?, stackStartFunction: Function?): any {
        this.rethrowIfSpecialError(actual, expected);
        message = (expected && (expected as Error).name ? ' (' + (expected as Error).name + ').': '.') +
        (message ? ' ' + message: '.');

//        if (shouldThrow && actual) {
//            this.fail_(actual, expected, 'Missing expected exception' + message, operator, stackStartFunction);
//        }

        if (!shouldThrow && expectedException(actual, expected)) {
            this.fail_(actual, expected, 'Got unwanted exception' + message, operator, stackStartFunction);
        }

        if ((shouldThrow && expected != null && !expectedException(actual, expected)) || (!shouldThrow && actual != null)) {
            this.fail_("" + actual, expected, "thrown error of wrong type " + message, operator, stackStartFunction);
        }
        return actual;
    }
}

export public const deepEqual = _deepEqual;
/* -*- mode: typescript;-*- */
