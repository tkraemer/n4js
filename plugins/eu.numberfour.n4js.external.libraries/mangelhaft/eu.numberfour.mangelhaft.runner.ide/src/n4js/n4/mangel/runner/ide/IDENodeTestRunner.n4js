/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
import {TestController} from "n4/mangel/TestController"
import {TestInfos} from "n4/mangel/mangeltypes/TestInfos"
import {IDEReporter} from "n4/mangel/reporter/ide/IDEReporter"
import {N4Injector} from "n4js/lang/N4Injector"
import {FIXME1} from "n4/mangel/Test"
import {FIXME2} from "n4/mangel/Test"
import {IFIXME} from "n4/mangel/Test"
import {IFIXME2} from "n4/mangel/Test"
import {TestDIComponent} from "n4/mangel/mangeltypes/TestDIComponent"

class IDENodeTestRunner  {
    @Inject
    protected controller: TestController;
    @Inject
    protected reporter: IDEReporter;

    @Final protected async run(): void {

        try {
            let testCatalog: TestInfos,
                catalogDef = n4.runtimeOptions["test-catalog"];

            if (typeof catalogDef === "string") {
                let req = await fetch(catalogDef as string, {
                    headers: {
                        "Content-Type": "application/vnd.n4.ide.assemble_test_catalog_req.tm+json"
                    }
                });
                testCatalog = (await req.json()) as TestInfos;
            } else {
                testCatalog = catalogDef as TestInfos;
            }
            this.reporter.endpoint = testCatalog.endpoint;
            this.controller.reporters = [this.reporter];
            let groupResults = await this.controller.runGroups(testCatalog, 100);
        } catch (err) {
            let errObj: Object+ = err as Object;
            console.error(err + "\nstack: " + errObj.stack.replace(/^Error:?\s*/, ""));
            throw err;
        }
    }
}
@Bind(IFIXME, FIXME1)
@Bind(IFIXME2, FIXME2)
@Binder
class TestBinder {}

@GenerateInjector
@WithParentInjector(TestDIComponent)
@UseBinder(TestBinder)
class Root {
    @Inject
    runner: IDENodeTestRunner;
}

const parentinj = N4Injector.of(TestDIComponent);
const root = N4Injector.of(Root, parentinj).create(Root);

export default public const main = root.runner;
