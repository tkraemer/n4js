/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
import {IInstrumentedTest} from "n4/mangel/mangeltypes/IInstrumentedTest"
import {ITestReporter} from "n4/mangel/mangeltypes/ITestReporter"
import {ResultGroups} from "n4/mangel/mangeltypes/ResultGroups"
import {TestMethodDescriptor} from "n4/mangel/mangeltypes/TestMethodDescriptor"
import {TestResult} from "n4/mangel/mangeltypes/TestResult"
import {TestSpy} from "n4/mangel/mangeltypes/TestSpy"
import {TestStatus} from "n4/mangel/mangeltypes/TestStatus"
import { cli_color_ } from "n4/mangel/reporter/console/cli_color"
//import * as cli_color from "cli-color"
const cli_color = System._nodeRequire("cli-color") as cli_color_;

export public class ConsoleReporter implements ITestReporter {
    public timeoutBuffer: number = 1000 * 30;
    private logger: {function(...any):void} = function(... messages: any) {console.log.apply(console, messages);};
    private buffered = false;
    public buffer: Array<Array<?>> = [];
    
    @Inject
    @Override public spy: TestSpy;

    public setLogger(logger: {function(...any):void}): this {
        this.logger = logger;
        return this;
    }
    
    public setBuffered(shouldBuffer: boolean): this {
        let that = this;
        this.buffered = shouldBuffer;
        if (shouldBuffer === true) {
            this.logger = function(... messages: any){
                that.buffer.push(messages);
            }
        }
        return this;
    }

    @Override public async register() {
        let sessionId: string = null;

        this.spy.testingStarted.add((numAllGroups: number, sid: string, numAllTests: number) => {
            this.logger.call(this, "Begin tests")
        });
        this.spy.groupStarted.add(group => {
            this.logger.call(this, ["  ", "Group", group.name, ":"].join(" "));
        });

        this.spy.testFinished.add((group: IInstrumentedTest, test: TestMethodDescriptor, testResult: TestResult): boolean? => {
            let unsuccessString = "FAIL";

            if (!testResult) {
                let err = new Error("testResult is null in handleTestFinished");
                console.error(this.constructor.n4type.fqn,test? test.name: "unknown test", err, err.stack);
                return true;
            }
            switch(testResult.testStatus) {
                case TestStatus.passed: {
                    this.logger.call(this, ["  ","  ", test.name, ":", cli_color.green("OK")].join(" "));
                    break;
                }
                case TestStatus.error:
                    unsuccessString = cli_color.red("ERROR");
                //fallthrough
                case TestStatus.failed: {
                    let trace: string;
                    try {
                        trace = cli_color.red(testResult && testResult.trace && testResult.trace.length ?
                        testResult.trace.join("\n"): "NO TRACE");
                    } catch (er) {
                        this.logger(er, cli_color.red(typeof (testResult.trace)));
                        trace = testResult.trace.toString();
                    }
                    this.logger(["  ","  ", test.name, ":", unsuccessString].join(" "));
                    this.logger(["  ", "  ", "  ", cli_color.red(testResult.message)].join(" "));
                    this.logger(["  ", "  ", "  ","Stack:", trace.split(/\n/).join("\n                ")].join(" "));
                    break;
                }
                case TestStatus.skipped_precondition: {
                    this.logger.call(this, ["  ","  ", test.name, ":", cli_color.cyan("SKIPPED_PRECONDITION")].join(" "));
                    break;
                }
                case TestStatus.skipped_not_implemented: {
                    this.logger.call(this, ["  ","  ", test.name, ":", cli_color.cyan("SKIPPED_NOT_IMPLEMENTED")].join(" "));
                    break;
                }

                case TestStatus.skipped: {
                    this.logger.call(this, ["  ","  ", test.name, ":", cli_color.yellow("SKIPPED")].join(" "));
                    break;
                }
            }
        });

        this.spy.testingFinished.add(async (resultGroups: ResultGroups) => {
            this.logger.call(this, "Tests done.")
        });

        return this;
    }
}

/* -*- mode: typescript;-*- */